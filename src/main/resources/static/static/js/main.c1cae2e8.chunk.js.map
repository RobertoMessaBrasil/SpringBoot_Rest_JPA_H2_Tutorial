{"version":3,"sources":["contactmanager/DisplayAll/rest.js","contactmanager/DisplayAll/m.js","contactmanager/i18n.js","contactmanager/DisplayAll/i18n.js","contactmanager/DisplayAll/c.js","contactmanager/DisplayAll/v.js","contactmanager/Display/rest.js","contactmanager/Display/m.js","contactmanager/Display/i18n.js","contactmanager/Display/c.js","contactmanager/Display/v.js","contactmanager/Edit/rest.js","contactmanager/Edit/m.js","contactmanager/Edit/i18n.js","contactmanager/Edit/c.js","contactmanager/Edit/v.js","contactmanager/Create/rest.js","contactmanager/Create/m.js","contactmanager/Create/i18n.js","contactmanager/Create/c.js","contactmanager/Create/v.js","contactmanager/Delete/mock.js","contactmanager/Delete/m.js","contactmanager/Delete/i18n.js","contactmanager/Delete/c.js","contactmanager/Delete/v.js","App.js","serviceWorker.js","index.js"],"names":["findAll","t","a","fetch","then","response","json","state","rowList","catch","e","console","log","retrieveAll","title","i18n","label1","label2","msg1","props","s","to","length","map","row","key","id","name","displayAll","this","tt","setState","Component","findById","EP_URL","retrieve","label3","label4","label5","label6","match","params","description","style","textAlign","display","updateContact","method","headers","body","JSON","stringify","ok","submit","editForm","invalidDataMsg","confirmDialog","isRedirect","changeHandler","bind","submitHandler","closeinvalidDataMsg","isInvalidContactData","onClick","onSubmit","type","onChange","value","width","colSpan","target","preventDefault","create","createForm","deleteContact","frontPage","option","yesHandler","noHandler","App","exact","path","component","DisplayAll","Display","Edit","Create","Delete","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.c1cae2e8.chunk.js","sourcesContent":["const EP_URL = '/contacts'\n\nexport async function findAll(t) {\n\n    await fetch(EP_URL)\n\n        .then(response => {\n\n            return response.json()\n\n        })\n\n        .then(json => {\n\n            t.state.rowList = json\n\n        })\n\n        .catch(e => console.log(e))\n\n}\n","//import { findAll } from './mock'\nimport { findAll } from './rest'\n\nexport async function retrieveAll(t) {\n\n    await findAll(t)\n\n}\n\nexport function defaultRowList() {\n\n    return []\n\n}\n","export default {\n\n    title: 'Contact Manager 1.0'\n    \n}\n","import i18n from '../i18n'\n\nexport default {\n\n    title: i18n.title,\n\n    rowList: {\n\n        label1: 'New',  \n        label2: 'Contacts',\n        msg1: 'No results'\n\n    }\n\n}\n","import { Component } from 'react'\n\nimport { defaultRowList, retrieveAll } from './m'\nimport { displayAll } from './v'\n\nexport default class extends Component {\n\n    render() {\n\n        let t = this\n\n        return displayAll(t)\n\n    }\n\n    async componentDidMount() {\n\n        let t = this\n        let s = t.state\n\n        let tt = {state:s}\n\n        await retrieveAll(tt)\n\n        t.setState(tt.state)\n\n    }\n\n    constructor(props) {\n\n        super(props);\n\n        let t = this\n\n        t.state = { rowList: defaultRowList() }\n\n    }\n\n}\n","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nimport i18n from './i18n'\n\nexport function displayAll(t) {\n\n    let s = t.state\n    \n    return (\n\n        <div>\n\n            <h2>{i18n.title}</h2>\n\n            <p><Link to=\"/Create\">{i18n.rowList.label1}</Link></p>\n\n            <fieldset>\n\n                <legend>{i18n.rowList.label2}</legend>\n\n                {s.rowList.length === 0 &&\n\n                    <p>{i18n.rowList.msg1}</p>\n\n                }\n\n                {s.rowList.length > 0 &&\n\n                    s.rowList.map(\n\n                        row => <p key={row.id}><Link to={\"/Display/\" + row.id}>{row.name}</Link></p>\n\n                    )\n\n                }\n\n            </fieldset>\n\n        </div>\n\n    )\n\n}\n","const EP_URL = '/contacts'\n\nexport async function findById(t) {\n\n    await fetch(EP_URL + '/' + t.state.id)\n\n        .then(response => response.json())\n\n        .then(json => { t.state.row = json })\n\n        .catch(e => console.log(e))\n\n}\n","//import { findById } from './mock'\nimport {findById} from './rest'\n\nexport async function retrieve(t) {\n\n    return await findById(t)\n\n}\n\nexport function defaultRow() {\n\n    return ({\n\n        name: '',\n        description: ''\n\n    })\n\n}\n","import i18n from '../i18n'\n\nexport default {\n\n    title: i18n.title,\n\n    row: {\n\n        label1: 'Home',\n        label2: 'Edit',\n        label3: 'Delete',\n        label4: 'Contact',\n        label5: 'Name',\n        label6: 'Description'\n\n    }\n\n}\n","import { Component } from 'react'\n\nimport { defaultRow, retrieve } from './m'\n\nimport { display } from './v'\n\nexport default class extends Component {\n\n    render() {\n\n        let t = this\n\n        return display(t)\n\n    }\n\n    async componentDidMount() {\n\n        let t = this\n        let s = t.state\n\n        let tt = {state:s}\n\n        await retrieve(tt)\n\n        t.setState(tt)\n\n    }\n\n    constructor(props) {\n\n        super(props)\n\n        let t = this\n\n        t.state = {\n\n            id: props.match.params.id,\n            row: defaultRow()\n\n        }\n\n    }\n\n}\n","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nimport i18n from './i18n'\n\nexport function display(t) {\n\n    let s = t.state\n    let row = s.row\n\n    return (\n\n        <div>\n\n            <h2>{i18n.title}</h2>\n\n            <p>\n\n                <Link to=\"/\">{i18n.row.label1}</Link>&nbsp;\n                <Link to={\"/Edit/\" + s.id}>{i18n.row.label2}</Link>&nbsp;\n                <Link to={\"/Delete/\" + s.id}>{i18n.row.label3}</Link>\n\n            </p>\n\n            <fieldset>\n\n                <legend>{i18n.row.label4}</legend>\n\n                <table>\n\n                    <tbody>\n\n                        <tr><th style={{ textAlign: \"right\" }}>{i18n.row.label5}</th><td>{row.name}</td></tr>\n                        <tr><th style={{ textAlign: \"right\" }}>{i18n.row.label6}</th><td>{row.description}</td></tr>\n\n                    </tbody>\n\n                </table>\n\n            </fieldset>\n\n        </div>\n\n    )\n\n}\n","const EP_URL = '/contacts'\n\nexport async function findById(t) {\n\n    return (\n\n        await fetch(EP_URL + '/' + t.state.id)\n\n            .then(response => response.json())\n\n            .then(json => { t.state.row = json })\n\n            .catch(e => console.log(e))\n\n    )\n\n}\n\nexport async function updateContact(t) {\n\n    let s = t.state\n    let row = s.row\n\n    return (\n\n        await fetch(\n\n            EP_URL + '/' + row.id,\n\n            {\n\n                method: 'PUT',\n\n                headers: {\n\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n\n                },\n\n                body: JSON.stringify({\n\n                    id: row.id,\n\n                    name: row.name,\n\n                    description: row.description\n\n                })\n\n            }\n\n        )\n\n            .then(response => { t.state.ok = true })\n\n            .catch(e => {\n\n                console.log(e)\n\n                t.state.ok = false\n\n            })\n\n    )\n\n}\n","//import { findById } from './mock'\n//import { updateContact } from './mock'\nimport { findById } from './rest'\nimport { updateContact } from './rest'\n\nexport async function retrieve(t) {\n\n    await findById(t)\n\n}\n\nexport async function submit(t) {\n\n    let s = t.state\n    \n    if (s.row.name === '') {\n        \n        t.state.ok = false\n\n        return\n\n    }\n\n    await updateContact(t)\n\n}\n\nexport function defaultRow() {\n\n    return ({\n\n        name: '',\n        description: ''\n\n    })\n\n}\n","import i18n from '../i18n'\n\nexport default {\n\n    title: i18n.title,\n\n    editForm: {\n\n        label1: 'Home',\n        label2: 'Cancel',\n        label3: 'Contact',\n        label4: 'Name',\n        label5: 'Description',\n        label6: 'Save'\n\n    },\n\n    invalidDataMsg: {\n\n        msg1: 'Name must be filled',\n        label1: 'Close',\n\n    },\n\n    confirmDialog: {\n\n        msg1: 'Confirm delete?',\n        label1: 'Yes',\n        label2: 'No'\n\n    },\n\n}\n","import React, { Component } from 'react'\nimport { Redirect } from 'react-router-dom'\n\nimport { defaultRow, retrieve, submit } from './m'\n\nimport { editForm, invalidDataMsg } from './v'\n\nexport default class extends Component {\n\n    render() {\n\n        let t = this\n\n        let s = t.state\n\n        if (s.isRedirect === true) {\n\n            return <Redirect to={\"/Display/\" + s.id} />\n\n        }\n\n        if (s.isInvalidContactData) {\n\n            return invalidDataMsg(t)\n\n        }\n\n        return editForm(t)\n\n    }\n\n    changeHandler(e) {\n\n        let t = this\n        let s = t.state\n\n        let row = s.row\n\n        row[e.target.name] = e.target.value\n\n        t.setState({\n\n            row: row\n\n        })\n\n    }\n\n    async submitHandler(e) {\n\n        e.preventDefault()\n\n        let t = this\n        let s = t.state\n\n        let tt = { state: s }\n\n        await submit(tt)\n\n        if (tt.state.ok) {\n\n            t.setState({ isRedirect: true })\n\n            return\n\n        }\n\n        t.setState({ isInvalidContactData: true })\n\n    }\n\n    closeinvalidDataMsg() {\n\n        let t = this\n\n        t.setState({ isInvalidContactData: false })\n\n    }\n\n    async componentDidMount() {\n\n        let t = this\n        let s = t.state\n\n        let tt = { state: s }\n\n        await retrieve(tt)\n\n        t.setState(tt.state)\n\n    }\n\n    constructor(props) {\n\n        super(props)\n\n        let t = this\n\n        t.state = {\n\n            id: props.match.params.id,\n\n            isRedirect: false,\n\n            row: defaultRow()\n\n        }\n\n        t.changeHandler = t.changeHandler.bind(t)\n        t.submitHandler = t.submitHandler.bind(t)\n        t.closeinvalidDataMsg = t.closeinvalidDataMsg.bind(t)\n\n    }\n\n}\n","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nimport i18n from './i18n'\n\nexport function editForm(t) {\n\n    let s = t.state\n    let row = s.row\n\n    return (\n\n        <div>\n\n            <h2>{i18n.title}</h2>\n\n            <p>\n\n                <Link to=\"/\">{i18n.editForm.label1}</Link>&nbsp;\n                    <Link to={\"/Display/\" + s.id}>{i18n.label2}</Link>\n\n            </p>\n\n            <fieldset>\n\n                <legend>{i18n.editForm.label3}</legend>\n\n                <form onSubmit={t.submitHandler}>\n\n                    <table>\n\n                        <tbody>\n\n                            <tr>\n\n                                <th style={{ textAlign: \"right\" }}>{i18n.editForm.label4}</th>\n\n                                <td><input type=\"text\" name=\"name\" onChange={t.changeHandler} value={row.name} /></td>\n\n                            </tr>\n\n                            <tr>\n\n                                <th style={{ textAlign: \"right\" }}>{i18n.editForm.label5}</th>\n\n                                <td><textarea style={{ width: \"100%\" }} name=\"description\" onChange={t.changeHandler} value={row.description} /></td>\n\n                            </tr>\n\n                            <tr>\n\n                                <td colSpan=\"2\" style={{ textAlign: \"right\" }}><button>{i18n.editForm.label6}</button></td>\n\n                            </tr>\n\n                        </tbody>\n\n                    </table>\n\n                </form>\n\n            </fieldset>\n\n        </div>\n\n    )\n\n}\n\nexport function invalidDataMsg(t) {\n\n    return (\n\n        <div>\n\n            <h2>{i18n.title}</h2>\n\n            {i18n.invalidDataMsg.msg1}\n\n            <button onClick={t.closeinvalidDataMsg}>{i18n.invalidDataMsg.label1}</button>\n\n        </div>\n\n    )\n\n}\n","const EP_URL = '/contacts'\n\nexport async function create(t) {\n\n    let s = t.state\n\n    await fetch(\n\n        EP_URL,\n\n        {\n\n            method: 'POST',\n\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n\n            body: JSON.stringify({\n\n                name: s.row.name,\n\n                description: s.row.description\n\n            })\n\n        })\n\n        .then(response => { t.state.ok = true })\n\n        .catch(\n\n            e => {\n\n                t.state.ok = false\n\n                console.log(e)\n\n            }\n\n        )\n\n\n}\n","//import { create } from './mock'\nimport {create} from './rest'\n\nexport async function submit(t) {\n\n    let s = t.state\n\n    if (s.row.name === '') {\n\n        s.ok = false\n\n        return\n\n    }\n\n    await create(t)\n\n}\n\nexport function defaultRow() {\n\n    return ({\n\n        name: '',\n        description: ''\n\n    })\n\n}\n","import i18n from '../i18n'\n\nexport default {\n\n    title: i18n.title,\n\n    createForm: {\n\n        label1: 'Home',\n        label2: 'Cancel',\n        label3: 'Contact',\n        label4: 'Name',\n        label5: 'Description',\n        label6: 'Save',\n\n    },\n\n    invalidDataMsg: {\n\n        msg1: 'Name must be filled',\n        label1: 'Close',\n\n    }\n\n}\n","import React, { Component } from 'react'\nimport { Redirect } from 'react-router-dom'\n\nimport { defaultRow, submit } from './m'\n\nimport { createForm, invalidDataMsg } from './v'\n\nexport default class extends Component {\n\n    render() {\n\n        let t = this\n        let s = t.state\n\n        if (s.isRedirect) {\n\n            return <Redirect to=\"/\" />\n\n        }\n\n        if (s.isInvalidContactData) {\n\n            return invalidDataMsg(t)\n\n        }\n\n        return createForm(t)\n\n    }\n\n    changeHandler(e) {\n\n        let t = this\n        let s = t.state\n\n        let row = s.row\n\n        row[e.target.name] = e.target.value\n\n        t.setState({\n\n            row: row\n\n        })\n\n    }\n\n    async submitHandler(e) {\n\n        e.preventDefault()\n\n        let t = this\n        let s = t.state\n\n        let tt = {state:s}\n\n        await submit(tt)\n\n        t.setState(tt.state)\n\n        if (s.ok) {\n\n            t.setState({ isRedirect: true })\n\n        } else {\n\n            t.setState({ isInvalidContactData: true })\n\n        }\n\n    }\n\n    closeinvalidDataMsg() {\n\n        let t = this\n\n        t.setState({ isInvalidContactData: false })\n\n    }\n\n    constructor(props) {\n\n        super(props)\n\n        let t = this\n\n        t.state = { row: defaultRow(), isRedirect: false, isInvalidContactData: false }\n\n        t.changeHandler = t.changeHandler.bind(t)\n        t.submitHandler = t.submitHandler.bind(t)\n        t.closeinvalidDataMsg = t.closeinvalidDataMsg.bind(t)\n\n    }\n\n}","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nimport i18n from './i18n'\n\nexport function createForm(t) {\n\n    let s = t.state\n    let row = s.row\n\n    return (\n\n        <div>\n\n            <h2>{i18n.title}</h2>\n\n            <p>\n\n                <Link to=\"/\">{i18n.createForm.label1}</Link>\n\n                &nbsp;\n\n                <Link to={\"/\"}>{i18n.createForm.label2}</Link>\n\n            </p>\n\n            <fieldset>\n\n                <legend>{i18n.createForm.label3}</legend>\n\n                <form onSubmit={t.submitHandler}>\n\n                    <table>\n\n                        <tbody>\n\n                            <tr>\n\n                                <th style={{ textAlign: \"right\" }}>{i18n.createForm.label4}</th>\n\n                                <td><input type=\"text\" name=\"name\" onChange={t.changeHandler} value={row.name} /></td>\n\n                            </tr>\n\n                            <tr>\n\n                                <th style={{ textAlign: \"right\" }}>{i18n.createForm.label5}</th>\n\n                                <td><textarea style={{ width: \"100%\" }} name=\"description\" onChange={t.changeHandler} value={row.description} /></td>\n\n                            </tr>\n\n                            <tr>\n\n                                <td colSpan=\"2\" style={{ textAlign: \"right\" }}>\n\n                                    <input type=\"submit\" value={i18n.createForm.label6} />\n\n                                </td>\n\n                            </tr>\n\n                        </tbody>\n\n                    </table>\n\n                </form>\n\n            </fieldset>\n\n        </div>\n\n    )\n\n}\n\nexport function invalidDataMsg(t) {\n\n    return (\n\n        <div>\n\n            <h2>{i18n.title}</h2>\n\n            {i18n.invalidDataMsg.msg1}\n\n            <button onClick={t.closeinvalidDataMsg}>{i18n.invalidDataMsg.label1}</button>\n\n        </div>\n\n    )\n\n}\n","export async function deleteContact(s) {\n\n    return { ok: true }\n\n}\n","import { deleteContact } from './mock'\n\nexport async function submit(s) {\n\n    return await deleteContact(s)\n\n}\n","import i18n from '../i18n'\n\nexport default {\n\n    title: i18n.title,\n\n    frontPage: {\n\n        label1: 'Yes',\n        label2: 'No',\n        msg1: 'Confirm Delete?'\n\n    }\n\n}\n","import React, { Component } from 'react'\nimport { Redirect } from 'react-router-dom'\n\nimport { submit } from './m'\n\nimport { confirmDialog } from './v'\n\nconst YES = 'y'\nconst NO = 'n'\n\nexport default class extends Component {\n\n    render() {\n\n        let t = this\n\n        let s = t.state\n\n        if (s.option === YES) {\n\n            return <Redirect to=\"/\" />\n\n        } else if (s.option === NO) {\n\n            return <Redirect to={\"/Display/\" + s.id} />\n\n        }\n\n        return confirmDialog(t)\n\n    }\n\n    async yesHandler() {\n\n        let t = this\n\n        await submit()\n\n        t.setState({ option: YES })\n\n    }\n\n    async noHandler() {\n\n        let t = this\n\n        t.setState({ option: NO })\n\n    }\n\n    constructor(props) {\n\n        super(props)\n\n        let t = this\n\n        t.state = {\n\n            id: props.match.params.id,\n\n            option: ''\n\n        }\n\n        t.yesHandler = t.yesHandler.bind(t)\n        t.noHandler = t.noHandler.bind(t)\n\n    }\n\n}\n","import React from 'react'\n\nimport i18n from './i18n'\n\nexport function confirmDialog(t) {\n\n    return (\n\n        <div>\n\n            <h2>{i18n.title}</h2>\n\n\n            <table>\n\n                <tbody>\n\n                    <tr>\n\n                        <td>{i18n.frontPage.msg1}</td>\n\n                    </tr>\n\n                    <tr>\n\n                        <td style={{ textAlign: \"center\" }}>\n\n                            <button onClick={t.yesHandler}>{i18n.frontPage.label1}</button>\n                            <button onClick={t.noHandler}>{i18n.frontPage.label2}</button>\n\n                        </td>\n\n                    </tr>\n\n                </tbody>\n\n            </table>\n\n        </div>\n\n    )\n\n}\n","import React from 'react'\n\nimport {\n\n  BrowserRouter as Router,\n  Switch,\n  Route,\n\n} from 'react-router-dom'\n\nimport DisplayAll from './contactmanager/DisplayAll/c'\nimport Display from './contactmanager/Display/c'\nimport Edit from './contactmanager/Edit/c'\nimport Create from './contactmanager/Create/c'\nimport Delete from './contactmanager/Delete/c'\n\nfunction App() {\n\n  return (\n\n    <Router>\n\n      <Switch>\n\n        <Route exact path=\"/\" component={DisplayAll} />\n\n        <Route path=\"/Display/:id\" component={Display} />\n\n        <Route path=\"/Edit/:id\" component={Edit} />\n\n        <Route path=\"/Create\" component={Create} />\n\n        <Route path=\"/Delete/:id\" component={Delete} />\n\n      </Switch>\n\n    </Router >\n\n  )\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}